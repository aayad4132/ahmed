 /*
  Example sketch for the PS3 Bluetooth library - developed by Kristian Lauszus
  For more information visit my blog: http://blog.tkjelectronics.dk/ or
  send me an e-mail:  kristianl@tkjelectronics.com
*/

#include <usbhub.h> //This is the library for the bluetooth dongle
#include <PS3BT.h> //This is the library for the PS3 controller

// Satisfy the IDE, which needs to see the include statment in the ino too.
// the following code is necessary for the USB shield, nothing to change here
#ifdef dobogusinclude
#include <spi4teensy3.h>
#include <SPI.h>
#endif

USB Usb; // Create a USB Hub instance
//USBHub Hub1(&Usb); // Some dongles have a hub inside
BTD Btd(&Usb); // Create a bluetooth dongle instance
/* You can create the instance of the class in two ways */
PS3BT PS3(&Btd); // This will just create the instance
//PS3BT PS3(&Btd, 0x00, 0x15, 0x83, 0x3D, 0x0A, 0x57); // This will also store the bluetooth address - this can be obtained from the dongle when running the sketch

// The following variable determines if you will use the accelerotmeters

// in the controller
bool printAngle;

// The following are the variables for the controller
bool Triangle = 0;
bool Square = 0;
bool Circle = 0;
bool Cross = 0;
bool Up = 0;
bool Down = 0;
bool Left = 0;
bool Right = 0;
bool Left_Trigger_Button_1 = 0;
bool Right_Trigger_Button_1 = 0;
bool Left_Joystick_Button_3 = 0;
bool Right_Joystick_Button_3 = 0;
int Left_X;
int Left_Y;
int Right_X;
int Right_Y;
int Left_Trigger_Analog;
int Right_Trigger_Analog;
int Roll_Angle; 
int Pitch_Angle;
int motor1 = 5;
int motor2 = 6;
int horn = LOW;
int music = LOW;
int lights = LOW;
int speedd = LOW;
int l1 = 2;
int l2 = 7;
int l3 = 10;
int l4 = 11;
int C4 = 262;
int F4 = 349;
int E4 = 330;
int G4 = 392;
int D4 = 294;
int tempo = 570;
int skr = 9;

void setup() {
  pinMode(5, OUTPUT);
  pinMode(6, OUTPUT);
  pinMode(2, OUTPUT);
  pinMode(7, OUTPUT);
  pinMode(10, OUTPUT);
  pinMode(11, OUTPUT);
  pinMode(9, OUTPUT);
  Serial.begin(9600);
#if !defined(__MIPSEL__)
  while (!Serial); // Wait for serial port to connect - used on Leonardo, Teensy and other boards with built-in USB CDC serial connection
#endif
  if (Usb.Init() == -1) {
    Serial.print(F("\r\nOSC did not start"));
    while (1); //halt
  }
  Serial.print(F("\r\nPS3 Bluetooth Library Started"));
}

void loop() {
  Usb.Task();

  if (PS3.PS3Connected || PS3.PS3NavigationConnected) {//-> This is where the code starts,
    //if there is connectivity the controller
    //starts reading buttons

    // The "Play Station" button disconnects the controller
    if (PS3.getButtonClick(PS)) {
      PS3.disconnect();//This command disconnects the controller
      Serial.print(F("\r\nPS Controller Disconnected"));
    }

    // The select button helps you print the status of the controller
    // (Battery level, rumble on/off, connection-bluetooth, connection
    // to power supply)
    if (PS3.getButtonClick(SELECT)) {
      Serial.print(F("\r\nSelect - "));
      PS3.printStatusString(); // This line prints the controller status
    }

    // Analog button values can be read from almost all buttons
    if (PS3.getAnalogButton(L2) || PS3.getAnalogButton(R2)) {
      Left_Trigger_Analog = PS3.getAnalogButton(L2);
      Right_Trigger_Analog = PS3.getAnalogButton(R2);
      Serial.print(F("\r\nL2: "));
      Serial.print(Left_Trigger_Analog);
      Serial.print(F("\tR2: ")); 
      Serial.print(Right_Trigger_Analog);
      analogWrite(motor1, Right_Trigger_Analog / 1.5);
      analogWrite(motor2, Right_Trigger_Analog / 1.5); 
      analogWrite(l1, Right_Trigger_Analog);
      analogWrite(l2, Right_Trigger_Analog);
      analogWrite(l3, 0);
      analogWrite(l4, 0);
      if (Right_Trigger_Analog < 200) {
        analogWrite(motor1, 0);
        analogWrite(motor2, 0);
       if (Right_Trigger_Analog > 200) {
        if (Left_Trigger_Analog > 200) {
          analogWrite(motor1, 0);
          analogWrite(motor2, 0);
          analogWrite(l3, 255);
          analogWrite(l4, 255);
          analogWrite(l1, 0);
          analogWrite(l2, 0);
       
          
        }
        }

      }
      
    }

    // You can read the right side buttons (star, and circle and all that)
    if (PS3.getButtonClick(TRIANGLE)) {
//      Triangle = !Triangle;
//      horn = !horn;
//      tone(9, C4);
//      if (horn == HIGH) {
//        noTone(9);
//      }
      
      Serial.print(F("\r\nTraingle = "));
      Serial.print(Triangle);
//      digitalWrite(blue_led, HIGH);
//    } else {
//      digitalWrite(blue_led, LOW);
//                           
      }
    if (PS3.getButtonClick(CIRCLE)) {
      Circle = !Circle;
      Serial.print(F("\r\nCircle = "));
      Serial.print(Circle);
//      music = !music;
      tone(9, C4);
//      delay(tempo / 2 / 2);
//      noTone(9);
//      delay(tempo / 2 / 2);
//      tone(9, E4);
//      delay(tempo / 2 / 2);
//      noTone(9);
//      delay(tempo / 2 / 2);
//      tone(9, F4);
//      delay(tempo / 2 / 2);
//      noTone(9);
//      delay(tempo / 2 / 2);
//      tone(9, G4);
//      delay(tempo);
//      noTone(9);
//      delay(tempo);
//      tone(9, C4);
//      delay(tempo / 2 / 2);
//      noTone(9);
//      delay(tempo / 2 / 2);
//      tone(9, E4);
//      delay(tempo / 2 / 2);
//      noTone(9);
//      delay(tempo / 2 / 2);
//      tone(9, F4);
//      delay(tempo / 2 / 2);
//      noTone(9);
//      delay(tempo / 2 / 2);
//      tone(9, G4);
//      delay(tempo);
//      noTone(9);
//      delay(tempo);
//      tone(9, C4);
//      delay(tempo / 2 / 2);
//      noTone(9);
//      delay(tempo / 2 / 2);
//      tone(9, E4);
//      delay(tempo / 2 / 2);
//      noTone(9);
//      delay(tempo / 2 / 2);
//      tone(9, F4);
//      delay(tempo / 2 / 2);
//      noTone(9);
//      delay(tempo / 2 / 2);
//      tone(9, G4);
//      delay(tempo / 2);
//      noTone(9);
//      delay(tempo / 2);
//      tone(9, E4);
//      delay(tempo / 2);
//      noTone(9);
//      delay(tempo / 2);
//      tone(9, C4);
//      delay(tempo / 2);
//      noTone(9);
//      delay(tempo / 2);
//      tone(9, E4);
//      delay(tempo / 2);
//      noTone(9);
//      delay(tempo / 2);
//      tone(9, D4);
//      delay(tempo);
//      noTone(9);
//      delay(tempo);
//      tone(9, E4);
//      delay(tempo / 2 / 2);
//      noTone(9);
//      delay(tempo / 2 / 2);
//      tone(9, E4);
//      delay(tempo / 2 / 2);
//      noTone(9);
//      delay(tempo / 2 / 2);
//      tone(9, D4);
//      delay(tempo / 2 / 2);
//      noTone(9);
//      delay(tempo / 2 / 2);
//      tone(9, C4);
//      delay(tempo);
//      noTone(9);
//      delay(tempo);
//      tone(9, C4);
//      delay(tempo / 2 / 2);
//      noTone(9);
//      delay(tempo / 2 / 2);
//      tone(9, E4);
//      delay(tempo / 2);
//      noTone(9);
//      delay(tempo / 2);
//      tone(9, G4);
//      delay(tempo / 2 / 2);
//      noTone(9);
//      delay(tempo / 2 / 2);
//      tone(9, G4);
//      delay(tempo / 2 / 2);
//      noTone(9);
//      delay(tempo / 2 / 2);
//      tone(9, G4);
//      delay(tempo / 2 / 2);
//      noTone(9);
//      delay(tempo / 2 / 2);
//      tone(9, F4);
//      delay(tempo);
//      noTone(9);
//      delay(tempo);
//      tone(9, C4);
//      delay(tempo / 2 / 2);
//      noTone(9);
//      delay(tempo / 2 / 2);
//      tone(9, E4);
//      delay(tempo / 2 / 2);
//      noTone(9);
//      delay(tempo / 2 / 2);
//      tone(9, F4);
//      delay(tempo / 2 / 2);
//      noTone(9);
//      delay(tempo / 2 / 2);
//      tone(9, G4);
//      delay(tempo / 2);
//      noTone(9);
//      delay(tempo / 2);
//      tone(9, E4);
//      delay(tempo / 2);
//      noTone(9);
//      delay(tempo / 2);
//      tone(9, C4);
//      delay(tempo / 2);
//      noTone(9);
//      delay(tempo / 2);
//      tone(9, D4);
//      delay(tempo / 2);
//      noTone(9);
//      delay(tempo / 2);
//      tone(9, C4);
//      delay(tempo);
//      noTone(9);
//      delay(tempo);
      if (music == HIGH) {
        noTone(9);
      }
    }
    if (PS3.getButtonClick(CROSS)) {
      Cross = !Cross;
      Serial.print(F("\r\nCross = "));
      Serial.print(Cross);
    }
    if (PS3.getButtonClick(SQUARE)) {
      Square = !Square;
      Serial.print(F("\r\nSquare = "));
      Serial.print(Square);
      speedd = !speedd;
      analogWrite(motor1, 255);
      analogWrite(motor2, 255);
      if (speedd == HIGH) {
      analogWrite(motor1, Right_Trigger_Analog / 1.5);
      analogWrite(motor2, Right_Trigger_Analog / 1.5); 
      }
    }

    // You can read the left side arrows
    if (PS3.getButtonClick(UP)) {
      Up = !Up;
      Serial.print(F("\r\nUp = "));
      Serial.print(Up);
    }
    if (PS3.getButtonClick(RIGHT)) {
      Right = !Right;
      Serial.print(F("\r\nRight = "));
      Serial.print(Right);
    }
    if (PS3.getButtonClick(DOWN)) {
      Down = !Down;
      Serial.print(F("\r\nDown = "));
      Serial.print(Down);
    }
    if (PS3.getButtonClick(LEFT)) {
      Left = !Left;
      Serial.print(F("\r\nLeft = "));
      Serial.print(Left);
    }

    // The top trigger buttons can be read
    if (PS3.getButtonClick(L1)) {
      Left_Trigger_Button_1 = !Left_Trigger_Button_1;
      Serial.print(F("\r\nL1 = "));
      Serial.print(Left_Trigger_Button_1);
    }
    if (PS3.getButtonClick(R1)) {
      Right_Trigger_Button_1 = !Right_Trigger_Button_1;
      Serial.print(F("\r\nR1 = "));
      Serial.print(Right_Trigger_Button_1);
    }

    // The joysticks can also serve as buttons
    if (PS3.getButtonClick(L3)) {
      Left_Joystick_Button_3 = !Left_Joystick_Button_3;
      Serial.print(F("\r\nL3 = "));
      Serial.print(Left_Joystick_Button_3);
    }
    if (PS3.getButtonClick(R3)) {
      Right_Joystick_Button_3 = !Right_Joystick_Button_3;
      Serial.print(F("\r\nR3 = "));
      Serial.print(Right_Joystick_Button_3);
    }

    // The start button makes it switch between tilt/button control
    if (PS3.getButtonClick(START)) {
      Serial.print(F("\r\nStart - This toggles on/off for the angles"));
      printAngle = !printAngle;
    }
    
#if 1 // Set this to 1 in order to see the angle of the controller
    if (printAngle) { 
      // First we collect the controller values in variables
      Pitch_Angle = PS3.getAngle(Pitch);
      Roll_Angle = PS3.getAngle(Roll);
      Right_Trigger_Analog = PS3.getAnalogButton(R2);
//
//    if (Roll_Angle > 181) {
//     analogWrite(motor1, 12 0);
//     analogWrite(motor2, 0);
//     
//    
//    } 
//     
//     else if (Roll_Angle < 181) {
//      analogWrite(motor2, 120);
//      analogWrite(motor1, 0);
//     }
      
    
  
     
    

    


     
      // Then we trim the pitch within our desired values
      //if ((Pitch_Angle >= 90) && (Pitch_Angle <= 270)) {
      //  Pitch_Angle = map(Pitch_Angle, 90, 270, -100, 100);
      //} else {
      //  Pitch_Angle = 0;
      //}

      // Then we trim the roll within our desired values
      //if ((Roll_Angle >= 90) && (Roll_Angle <= 270)) {
      //  Roll_Angle = map(Roll_Angle, 90, 270, -100, 100);
      //} else {
      //  Roll_Angle = 0;
      //}

      // Finally we print the angles
      Serial.print(F("\r\nPitch: "));
      Serial.print(Pitch_Angle);
      Serial.print(F("\r Roll: "));
      Serial.print(Roll_Angle);
      
    } else {      // The joysticks are read only read if you are not reading from the accelerometers
      if (PS3.getAnalogHat(LeftHatX) > 137 || PS3.getAnalogHat(LeftHatX) < 117 || PS3.getAnalogHat(LeftHatY) > 137 ||
          PS3.getAnalogHat(LeftHatY) < 117 || PS3.getAnalogHat(RightHatX) > 137 || PS3.getAnalogHat(RightHatX) < 117 ||
          PS3.getAnalogHat(RightHatY) > 137 || PS3.getAnalogHat(RightHatY) < 117) {
        Left_X = PS3.getAnalogHat(LeftHatX);
        Left_Y = PS3.getAnalogHat(LeftHatY);
        Right_X = PS3.getAnalogHat(RightHatX);
        Right_Y = PS3.getAnalogHat(RightHatY);
        Serial.print(F("\r\nLeftHatX: "));
        Serial.print(Left_X);
        Serial.print(F("\tLeftHatY: "));
        Serial.print(Left_Y);
        Serial.print(F("\tRightHatX: "));
        Serial.print(Right_X);
        Serial.print(F("\tRightHatY: "));
        Serial.print(Right_Y);
        Right_Trigger_Analog = PS3.getAnalogButton(R2);

        if (Right_X > 128) {
          analogWrite(motor2, 150);
          analogWrite(motor1, 0);
        }
        else if (Right_X < 126) {
          analogWrite(motor1, 150 );
          analogWrite(motor2, 0);
        }
         
//      if (Right_Y >= 127 && Left_Y >= 127) {
//        analogWrite(blue_led, Right_Y);
//        analogWrite(red_led, Left_Y);
//      }
//      else if (Right_Y < 127 && Left_Y < 127) {
//        analogWrite(blue_led, Right_Y);
//        analogWrite(red_led, Left_Y);
//      }
//      }

//      if (Right_X < 127) {
//        analogWrite(blue_led, Right_X);
//      }
//
//      else if (Left_X < 127) {
//         analogWrite(red_led, Left_X);
//       
//      }
//
//      else {
//        analogWrite(red_led, 255); 
//        analogWrite(blue_led, 255);` 
//
//      }
        
      

    }
#endif

    /*
      // It is posisble to make the controller rumble
      PS3.setRumbleOn(RumbleLow);
      PS3.setRumbleOn(RumbleHigh);
    */

    /*
      //this is how you control the controller LEDs
      if (PS3.PS3Connected) {
        PS3.setLedOff();
        PS3.setLedOn(LED4);
      }
      if (PS3.PS3Connected) {
        PS3.setLedOff();
        PS3.setLedOn(LED1);
      }
      if (PS3.PS3Connected) {
        PS3.setLedOff();
        PS3.setLedOn(LED2);
      }
      if (PS3.PS3Connected) {
        PS3.setLedOff();
        PS3.setLedOn(LED3);
      }
    */




    //----------------------------------------------------------------------------------------------------------------------------
    // Place code that only happens when there is connectivity here.... that is a good idea in case you lose signal of the controller
    /* The following are the variable names for reference
            bool Triangle=0;
            bool Square=0;
            bool Circle=0;
            bool Cross=0;
            bool Up=0;
            bool Down=0;
            bool Left=0;
            bool Right=0;
            bool Left_Trigger_Button_1=0;
            bool Right_Trigger_Button_1=0;
            bool Left_Joystick_Button_3=0;
            bool Right_Joystick_Button_3=0;
            int Left_X;
            int Left_Y;
            int Right_X;
            int Right_Y;
            int Left_Trigger_Analog;
            int Right_Trigger_Analog;
            int Roll_Angle;
            int Pitch_Angle;
    */
    //----------------------------------------------------------------------------------------------------------------------------
    }//<- this loop closes the connectivity loop... stuff outside of this loop will happen even if the controller is not connected





  } }//***************************************************************************************************************************
  // Place code that needs to happen regardless of controller connectivity inside of here... turning off the motors i.e. !!!!!
  //***************************************************************************************************************************
